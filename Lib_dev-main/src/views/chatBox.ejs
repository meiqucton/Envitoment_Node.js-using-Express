<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Box</title>
    <style>
        #chat {
            width: 400px;
            margin: auto;
            border: 1px solid #ccc;
            padding: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        #messages {
            height: 300px;
            overflow-y: scroll;
            border-bottom: 1px solid #ccc;
            margin-bottom: 10px;
        }
        #messageInput {
            width: calc(100% - 80px);
        }
        #sendMessage {
            width: 70px;
        }
    </style>
</head>
<body>
    <div id="chat">
        <div id="messages"></div>
        <form id="messageForm">
            <input id="messageInput" name="message" type="text" placeholder="Type your message here..." required>
            <button type="submit" id="sendMessage">Send</button>
        </form>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const socket = io();
            const user_Id = '<%= user_Id %>';
            const otherUserId = '<%= otherUserId %>';
            const UserName = '<%= UserName %>';
            const roomId = [user_Id, otherUserId].sort().join('-');

            // xử lý để check id phòng phù hợp
            socket.emit('join', roomId);

            // hiện tin nhắn mới 
            socket.on('sendMessage', (chatMessage) => {
                if (chatMessage && chatMessage.UserName && chatMessage.message) {
                    const messageDiv = document.createElement('div');
                    messageDiv.textContent = `${chatMessage.UserName}: ${chatMessage.message}`;
                    document.getElementById('messages').appendChild(messageDiv);
                }
            });

            // tải lại đoạn chat cũ 
            socket.on('loadMessages', (messages) => {
                if (Array.isArray(messages)) {
                    messages.forEach((chatMessage) => {
                        if (chatMessage && chatMessage.UserName && chatMessage.message) {
                            const messageDiv = document.createElement('div');
                            messageDiv.textContent = `${chatMessage.UserName}: ${chatMessage.message}`;
                            document.getElementById('messages').appendChild(messageDiv);
                        }
                    });

                    // chức năng cuộn xuống để hiện tin nhăn mới nhất 
                    const messagesDiv = document.getElementById('messages');
                    messagesDiv.scrollTop = messagesDiv.scrollHeight;
                }
            });

            // chức năng nhận tin nhắn phía cilent 
            document.getElementById('messageForm').addEventListener('submit', (e) => {
                e.preventDefault();
                const message = document.getElementById('messageInput').value.trim();
                if (message) {
                    // Emit the message via Socket.io
                    socket.emit('sendMessage', { user_Id, roomId, message, UserName });
                    // xoá khoảng trắng 
                    document.getElementById('messageInput').value = '';
                }
            });
        });
    </script>
</body>
</html>
